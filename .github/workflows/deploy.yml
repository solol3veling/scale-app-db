name: Deploy PostgreSQL

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file from secrets
        run: |
          cat > .env << EOF
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_PORT=5432
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
          TZ=UTC
          PGADMIN_DEFAULT_EMAIL=admin@scaleapp.com
          PGADMIN_DEFAULT_PASSWORD=admin123
          PGADMIN_PORT=5050
          EOF

      - name: Copy PostgreSQL config to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ".,!.git,!.github"
          target: "/home/${{ secrets.SERVER_USER }}/scale-app-db"
          strip_components: 0
          overwrite: true

      - name: Deploy PostgreSQL to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/scale-app-db

            # Create network if it doesn't exist
            docker network create traefik_network 2>/dev/null || true

            # Check if this is an update or first deployment
            if docker ps | grep -q scale-app-db; then
              echo "⚠️  Production database detected - performing safe update..."

              # ONLY update scripts and configs (no container restart)
              echo "Updating backup/restore scripts..."
              docker cp scripts/backup.sh scale-app-db:/scripts/backup.sh
              docker cp scripts/restore.sh scale-app-db:/scripts/restore.sh
              docker cp scripts/crontab scale-app-db:/etc/crontabs/root

              # Reload cron without restarting container
              docker exec scale-app-db sh -c "pkill crond && crond -f -l 2 &" 2>/dev/null || true

              echo "✅ Scripts updated without restarting database"
              echo "ℹ️  Database container NOT restarted (zero downtime)"
              echo "ℹ️  To apply Dockerfile/compose changes, manually run: docker compose up -d --build"

            else
              echo "First time deployment - starting PostgreSQL..."

              # Build and start PostgreSQL
              docker compose build
              docker compose up -d postgres

              # Wait for PostgreSQL to be ready
              echo "Waiting for PostgreSQL to start..."
              sleep 10

              # Verify PostgreSQL is running
              if docker ps | grep scale-app-db; then
                echo "✅ PostgreSQL is up and running"
                docker compose exec -T postgres pg_isready -U ${{ secrets.POSTGRES_USER }} || exit 1
              else
                echo "❌ PostgreSQL failed to start"
                docker compose logs postgres
                exit 1
              fi
            fi

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/scale-app-db
            echo "Container status:"
            docker compose ps
            echo ""
            echo "Database health check:"
            docker compose exec -T postgres pg_isready -U ${{ secrets.POSTGRES_USER }}
            echo ""
            echo "AWS credentials check:"
            docker compose exec -T postgres aws sts get-caller-identity
